
// Code generated by stanc f556d0df
#include <stan/model/model_header.hpp>
namespace beta_7_model_namespace {

template <typename T, typename S>
std::vector<T> resize_to_match__(std::vector<T>& dst, const std::vector<S>& src) {
  dst.resize(src.size());
  return dst;
}

template <typename T>
Eigen::Matrix<T, -1, -1>
resize_to_match__(Eigen::Matrix<T, -1, -1>& dst, const Eigen::Matrix<T, -1, -1>& src) {
  dst.resize(src.rows(), src.cols());
  return dst;
}

template <typename T>
Eigen::Matrix<T, 1, -1>
resize_to_match__(Eigen::Matrix<T, 1, -1>& dst, const Eigen::Matrix<T, 1, -1>& src) {
  dst.resize(src.size());
  return dst;
}

template <typename T>
Eigen::Matrix<T, -1, 1>
resize_to_match__(Eigen::Matrix<T, -1, 1>& dst, const Eigen::Matrix<T, -1, 1>& src) {
  dst.resize(src.size());
  return dst;
}
std::vector<double> to_doubles__(std::initializer_list<double> x) {
  return x;
}

std::vector<stan::math::var> to_vars__(std::initializer_list<stan::math::var> x) {
  return x;
}

inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math; 

static int current_statement__ = 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/gpfs/home/dcs/csrxgb/julia_stuff/src/common/tmpCmdStan/beta_7.stan', line 22, column 4 to column 15)",
                                                      " (in '/gpfs/home/dcs/csrxgb/julia_stuff/src/common/tmpCmdStan/beta_7.stan', line 23, column 4 to column 20)",
                                                      " (in '/gpfs/home/dcs/csrxgb/julia_stuff/src/common/tmpCmdStan/beta_7.stan', line 30, column 4 to column 26)",
                                                      " (in '/gpfs/home/dcs/csrxgb/julia_stuff/src/common/tmpCmdStan/beta_7.stan', line 31, column 4 to column 26)",
                                                      " (in '/gpfs/home/dcs/csrxgb/julia_stuff/src/common/tmpCmdStan/beta_7.stan', line 34, column 4 to column 70)",
                                                      " (in '/gpfs/home/dcs/csrxgb/julia_stuff/src/common/tmpCmdStan/beta_7.stan', line 37, column 12 to column 252)",
                                                      " (in '/gpfs/home/dcs/csrxgb/julia_stuff/src/common/tmpCmdStan/beta_7.stan', line 36, column 23 to line 38, column 9)",
                                                      " (in '/gpfs/home/dcs/csrxgb/julia_stuff/src/common/tmpCmdStan/beta_7.stan', line 36, column 8 to line 38, column 9)",
                                                      " (in '/gpfs/home/dcs/csrxgb/julia_stuff/src/common/tmpCmdStan/beta_7.stan', line 35, column 19 to line 39, column 5)",
                                                      " (in '/gpfs/home/dcs/csrxgb/julia_stuff/src/common/tmpCmdStan/beta_7.stan', line 35, column 4 to line 39, column 5)",
                                                      " (in '/gpfs/home/dcs/csrxgb/julia_stuff/src/common/tmpCmdStan/beta_7.stan', line 5, column 4 to column 19)",
                                                      " (in '/gpfs/home/dcs/csrxgb/julia_stuff/src/common/tmpCmdStan/beta_7.stan', line 6, column 4 to column 19)",
                                                      " (in '/gpfs/home/dcs/csrxgb/julia_stuff/src/common/tmpCmdStan/beta_7.stan', line 7, column 4 to column 24)",
                                                      " (in '/gpfs/home/dcs/csrxgb/julia_stuff/src/common/tmpCmdStan/beta_7.stan', line 8, column 4 to column 36)",
                                                      " (in '/gpfs/home/dcs/csrxgb/julia_stuff/src/common/tmpCmdStan/beta_7.stan', line 9, column 4 to column 19)",
                                                      " (in '/gpfs/home/dcs/csrxgb/julia_stuff/src/common/tmpCmdStan/beta_7.stan', line 10, column 4 to column 25)",
                                                      " (in '/gpfs/home/dcs/csrxgb/julia_stuff/src/common/tmpCmdStan/beta_7.stan', line 11, column 4 to column 37)",
                                                      " (in '/gpfs/home/dcs/csrxgb/julia_stuff/src/common/tmpCmdStan/beta_7.stan', line 12, column 4 to column 20)",
                                                      " (in '/gpfs/home/dcs/csrxgb/julia_stuff/src/common/tmpCmdStan/beta_7.stan', line 13, column 4 to column 14)",
                                                      " (in '/gpfs/home/dcs/csrxgb/julia_stuff/src/common/tmpCmdStan/beta_7.stan', line 14, column 4 to column 25)",
                                                      " (in '/gpfs/home/dcs/csrxgb/julia_stuff/src/common/tmpCmdStan/beta_7.stan', line 15, column 4 to column 13)"};



class beta_7_model : public model_base_crtp<beta_7_model> {

 private:
  int pos__;
  int f;
  int a;
  Eigen::Matrix<double, -1, -1> X_real;
  std::vector<int> y_real;
  int b;
  Eigen::Matrix<double, -1, -1> X_synth;
  std::vector<int> y_synth;
  double w;
  double beta;
  double beta_w;
  int flag;
 
 public:
  ~beta_7_model() { }
  
  std::string model_name() const { return "beta_7_model"; }
  
  beta_7_model(stan::io::var_context& context__,
               unsigned int random_seed__ = 0,
               std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    typedef double local_scalar_t__;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "beta_7_model_namespace::beta_7_model";
    (void) function__;  // suppress unused var warning
    
    try {
      
      pos__ = 1;
      context__.validate_dims("data initialization","f","int",
          context__.to_vec());
      
      current_statement__ = 11;
      f = context__.vals_i("f")[(1 - 1)];
      context__.validate_dims("data initialization","a","int",
          context__.to_vec());
      
      current_statement__ = 12;
      a = context__.vals_i("a")[(1 - 1)];
      current_statement__ = 13;
      validate_non_negative_index("X_real", "a", a);
      current_statement__ = 13;
      validate_non_negative_index("X_real", "f", f);
      context__.validate_dims("data initialization","X_real","double",
          context__.to_vec(a, f));
      X_real = Eigen::Matrix<double, -1, -1>(a, f);
      
      {
        std::vector<local_scalar_t__> X_real_flat__;
        current_statement__ = 13;
        assign(X_real_flat__, nil_index_list(), context__.vals_r("X_real"),
          "assigning variable X_real_flat__");
        current_statement__ = 13;
        pos__ = 1;
        current_statement__ = 13;
        for (size_t sym1__ = 1; sym1__ <= f; ++sym1__) {
          current_statement__ = 13;
          for (size_t sym2__ = 1; sym2__ <= a; ++sym2__) {
            current_statement__ = 13;
            assign(X_real,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_real_flat__[(pos__ - 1)], "assigning variable X_real");
            current_statement__ = 13;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 14;
      validate_non_negative_index("y_real", "a", a);
      context__.validate_dims("data initialization","y_real","int",
          context__.to_vec(a));
      y_real = std::vector<int>(a, 0);
      
      current_statement__ = 14;
      assign(y_real, nil_index_list(), context__.vals_i("y_real"),
        "assigning variable y_real");
      context__.validate_dims("data initialization","b","int",
          context__.to_vec());
      
      current_statement__ = 15;
      b = context__.vals_i("b")[(1 - 1)];
      current_statement__ = 16;
      validate_non_negative_index("X_synth", "b", b);
      current_statement__ = 16;
      validate_non_negative_index("X_synth", "f", f);
      context__.validate_dims("data initialization","X_synth","double",
          context__.to_vec(b, f));
      X_synth = Eigen::Matrix<double, -1, -1>(b, f);
      
      {
        std::vector<local_scalar_t__> X_synth_flat__;
        current_statement__ = 16;
        assign(X_synth_flat__, nil_index_list(), context__.vals_r("X_synth"),
          "assigning variable X_synth_flat__");
        current_statement__ = 16;
        pos__ = 1;
        current_statement__ = 16;
        for (size_t sym1__ = 1; sym1__ <= f; ++sym1__) {
          current_statement__ = 16;
          for (size_t sym2__ = 1; sym2__ <= b; ++sym2__) {
            current_statement__ = 16;
            assign(X_synth,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_synth_flat__[(pos__ - 1)], "assigning variable X_synth");
            current_statement__ = 16;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 17;
      validate_non_negative_index("y_synth", "b", b);
      context__.validate_dims("data initialization","y_synth","int",
          context__.to_vec(b));
      y_synth = std::vector<int>(b, 0);
      
      current_statement__ = 17;
      assign(y_synth, nil_index_list(), context__.vals_i("y_synth"),
        "assigning variable y_synth");
      context__.validate_dims("data initialization","w","double",
          context__.to_vec());
      
      current_statement__ = 18;
      w = context__.vals_r("w")[(1 - 1)];
      context__.validate_dims("data initialization","beta","double",
          context__.to_vec());
      
      current_statement__ = 19;
      beta = context__.vals_r("beta")[(1 - 1)];
      context__.validate_dims("data initialization","beta_w","double",
          context__.to_vec());
      
      current_statement__ = 20;
      beta_w = context__.vals_r("beta_w")[(1 - 1)];
      context__.validate_dims("data initialization","flag","int",
          context__.to_vec());
      
      current_statement__ = 21;
      flag = context__.vals_i("flag")[(1 - 1)];
      current_statement__ = 11;
      current_statement__ = 11;
      check_greater_or_equal(function__, "f", f, 0);
      current_statement__ = 12;
      current_statement__ = 12;
      check_greater_or_equal(function__, "a", a, 0);
      current_statement__ = 14;
      for (size_t sym1__ = 1; sym1__ <= a; ++sym1__) {
        current_statement__ = 14;
        current_statement__ = 14;
        check_greater_or_equal(function__, "y_real[sym1__]",
                               y_real[(sym1__ - 1)], 0);}
      current_statement__ = 14;
      for (size_t sym1__ = 1; sym1__ <= a; ++sym1__) {
        current_statement__ = 14;
        current_statement__ = 14;
        check_less_or_equal(function__, "y_real[sym1__]",
                            y_real[(sym1__ - 1)], 1);}
      current_statement__ = 15;
      current_statement__ = 15;
      check_greater_or_equal(function__, "b", b, 0);
      current_statement__ = 17;
      for (size_t sym1__ = 1; sym1__ <= b; ++sym1__) {
        current_statement__ = 17;
        current_statement__ = 17;
        check_greater_or_equal(function__, "y_synth[sym1__]",
                               y_synth[(sym1__ - 1)], 0);}
      current_statement__ = 17;
      for (size_t sym1__ = 1; sym1__ <= b; ++sym1__) {
        current_statement__ = 17;
        current_statement__ = 17;
        check_less_or_equal(function__, "y_synth[sym1__]",
                            y_synth[(sym1__ - 1)], 1);}
      current_statement__ = 18;
      current_statement__ = 18;
      check_greater_or_equal(function__, "w", w, 0);
      current_statement__ = 20;
      current_statement__ = 20;
      check_greater_or_equal(function__, "beta_w", beta_w, 0);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      current_statement__ = 2;
      validate_non_negative_index("coefs", "f", f);
      num_params_r__ += f;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename T__>
  T__ log_prob(std::vector<T__>& params_r__, std::vector<int>& params_i__,
               std::ostream* pstream__ = 0) const {
    typedef T__ local_scalar_t__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "beta_7_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    
    try {
      local_scalar_t__ alpha;
      
      current_statement__ = 1;
      alpha = in__.scalar();
      current_statement__ = 2;
      validate_non_negative_index("coefs", "f", f);
      Eigen::Matrix<local_scalar_t__, -1, 1> coefs;
      coefs = Eigen::Matrix<local_scalar_t__, -1, 1>(f);
      
      current_statement__ = 2;
      coefs = in__.vector(f);
      {
        current_statement__ = 3;
        lp_accum__.add(normal_log<propto__>(alpha, 0, 50));
        current_statement__ = 4;
        lp_accum__.add(normal_log<propto__>(coefs, 0, 50));
        current_statement__ = 5;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<false>(y_real, X_real, alpha, coefs));
        current_statement__ = 10;
        if (logical_eq(flag, 0)) {
          current_statement__ = 8;
          for (size_t i = 1; i <= b; ++i) {
            current_statement__ = 6;
            lp_accum__.add(
              (beta_w *
                ((((1 / beta) *
                    pow(
                      stan::math::exp(
                        bernoulli_logit_glm_lpmf<false>(y_synth,
                          rvalue(X_synth,
                            cons_list(index_uni(i), nil_index_list()),
                            "X_synth"), alpha, coefs)), beta)) -
                   ((1 / (beta + 1)) *
                     pow(
                       inv_logit(
                         (alpha +
                           multiply(
                             rvalue(X_synth,
                               cons_list(index_uni(i), nil_index_list()),
                               "X_synth"), coefs))), (beta + 1)))) +
                  pow(
                    (1 -
                      inv_logit(
                        (alpha +
                          multiply(
                            rvalue(X_synth,
                              cons_list(index_uni(i), nil_index_list()),
                              "X_synth"), coefs)))), (beta + 1)))));}
        } 
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob() 
    
  template <typename RNG>
  void write_array(RNG& base_rng__, std::vector<double>& params_r__,
                   std::vector<int>& params_i__, std::vector<double>& vars__,
                   bool emit_transformed_parameters__ = true,
                   bool emit_generated_quantities__ = true,
                   std::ostream* pstream__ = 0) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "beta_7_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    
    try {
      double alpha;
      
      current_statement__ = 1;
      alpha = in__.scalar();
      current_statement__ = 2;
      validate_non_negative_index("coefs", "f", f);
      Eigen::Matrix<double, -1, 1> coefs;
      coefs = Eigen::Matrix<double, -1, 1>(f);
      
      current_statement__ = 2;
      coefs = in__.vector(f);
      vars__.push_back(alpha);
      for (size_t sym1__ = 1; sym1__ <= f; ++sym1__) {
        vars__.push_back(coefs[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array() 
    
  void transform_inits(const stan::io::var_context& context__,
                       std::vector<int>& params_i__,
                       std::vector<double>& vars__, std::ostream* pstream__) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      
      pos__ = 1;
      double alpha;
      
      current_statement__ = 1;
      alpha = context__.vals_r("alpha")[(1 - 1)];
      current_statement__ = 2;
      validate_non_negative_index("coefs", "f", f);
      Eigen::Matrix<double, -1, 1> coefs;
      coefs = Eigen::Matrix<double, -1, 1>(f);
      
      {
        std::vector<local_scalar_t__> coefs_flat__;
        current_statement__ = 2;
        assign(coefs_flat__, nil_index_list(), context__.vals_r("coefs"),
          "assigning variable coefs_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (size_t sym1__ = 1; sym1__ <= f; ++sym1__) {
          current_statement__ = 2;
          assign(coefs, cons_list(index_uni(sym1__), nil_index_list()),
            coefs_flat__[(pos__ - 1)], "assigning variable coefs");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      vars__.push_back(alpha);
      for (size_t sym1__ = 1; sym1__ <= f; ++sym1__) {
        vars__.push_back(coefs[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits() 
    
  void get_param_names(std::vector<std::string>& names__) const {
    
    names__.resize(0);
    names__.push_back("alpha");
    names__.push_back("coefs");
    } // get_param_names() 
    
  void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.resize(0);
    std::vector<size_t> dims__;
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(f);
    dimss__.push_back(dims__);
    dims__.resize(0);
    
    } // get_dims() 
    
  void constrained_param_names(std::vector<std::string>& param_names__,
                               bool emit_transformed_parameters__ = true,
                               bool emit_generated_quantities__ = true) const {
    
    param_names__.push_back(std::string() + "alpha");
    for (size_t sym1__ = 1; sym1__ <= f; ++sym1__) {
      {
        param_names__.push_back(std::string() + "coefs" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  void unconstrained_param_names(std::vector<std::string>& param_names__,
                                 bool emit_transformed_parameters__ = true,
                                 bool emit_generated_quantities__ = true) const {
    
    param_names__.push_back(std::string() + "alpha");
    for (size_t sym1__ = 1; sym1__ <= f; ++sym1__) {
      {
        param_names__.push_back(std::string() + "coefs" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"coefs\",\"type\":{\"name\":\"vector\",\"length\":" << f << "},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"coefs\",\"type\":{\"name\":\"vector\",\"length\":" << f << "},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool emit_transformed_parameters__ = true,
                     bool emit_generated_quantities__ = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng__, params_r_vec, params_i_vec, vars_vec,
          emit_transformed_parameters__, emit_generated_quantities__, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    template <bool propto__, bool jacobian__, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto__,jacobian__,T_>(vec_params_r, vec_params_i, pstream);
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }

};
}
typedef beta_7_model_namespace::beta_7_model stan_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif


